- name: Macos workstation playbook
  hosts: foo
  connection: local
  gather_facts: true
  tasks:
    - name: Get OS Version
      ansible.builtin.debug:
        msg: '{{ ansible_distribution }}'
    - name: Create local bin directory
      ansible.builtin.file:
        path: '{{ ansible_env.HOME }}/bin'
        owner: '{{ ansible_env.USER }}'
        state: directory
        mode: "0755"
    - name: Package Installs
      block:
        - name: Escalate priviledge for brew
          ansible.builtin.command:
            cmd: /usr/bin/true
          register: true_cmd
          changed_when: true_cmd.rc != 0
          become: true
        - name: Check if Homebrew is installed
          ansible.builtin.command:
            cmd: hash brew
          register: brew_cmd
          changed_when: brew_cmd.rc != 0
        - name: Install Homebrew
          ansible.builtin.shell:
            cmd: NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          register: brew_install
          when: brew_cmd.rc != 0
          changed_when: brew_install.rc != 0
        - name: Tap Jira CLI repository
          community.general.homebrew_tap:
            name: ankitpokhrel/jira-cli
            state: present
          when: lookup('env', 'WS_EXTRA') is defined
        - name: Check if Google Chrome is installed
          ansible.builtin.command:
            cmd: test -d /Applications/Google\ Chrome.app
          register: googlechromedir
          changed_when: googlechromedir.rc != 0
        - name: Check that Google Chrome is installed
          community.general.homebrew:
            state: present
            name: homebrew/cask/google-chrome
          when: googlechromedir.rc != 0
          # Install chrome here if googlechromedir.rc is not 0
        - name: Install Google Chrome
          community.general.homebrew:
            state: latest
            update_homebrew: true
            name: google-chrome
          when: googlechromedir.rc != 0
        - name: Install Emacs
          community.general.homebrew_cask:
            name: emacs
            state: latest
        - name: Install Alfred
          community.general.homebrew_cask:
            name: alfred
            state: latest
        - name: Install basic homebrew packages
          community.general.homebrew:
            state: latest
            update_homebrew: true
            name:
              - bash
              - bash-completion@2
              - coreutils
              - findutils
              - gawk
              - gh
              - git
              - gnu-sed
              - gnu-tar
              - grep
              - gzip
              - htop
              - ispell
              - jq
              - pre-commit
              - python
              - shellcheck
              - unzip
              - yamllint
              - yq
        - name: Install plus homebrew package
          community.general.homebrew:
            state: latest
            update_homebrew: true
            name:
              - ansible
              - awscli
              - gh
              - go
              - groovy
              - jenkins-lts
              - nmap
              - node
              - openjdk
              - openssl@1.1
              - pnpm
              - pstree
              - telnet
              - terraform
              - unzip
              - virtualenv
          environment: '{{ WS_PLUS | default ({}) }}'
          when: WS_PLUS is defined
        - name: Install extra homebrew package
          community.general.homebrew:
            state: latest
            update_homebrew: true
            name:
              - argocd
              - docker-compose
              - git-lfs
              - gradle
              - helm
              - jupyterlab
              - kube-ps1
              - kubectx
              - kubernetes-cli
              - kustomize
              - maven
              - minikube
              - ncurses
              - openjdk@11
              - openjdk@8
              - openssl@1.1
              - p11-kit
              - packer
              - pkg-config
              - pre-commit
              - qemu
              - shfmt
              - six
              - snappy
              - sqlite
              - tree
              - watch
              - xz
              - yarn
              - yq
          environment: '{{ WS_EXTRA | default ({}) }}'
          when: WS_EXTRA is defined
        - name: Clone dotfile repo # noqa: latest
          ansible.builtin.git:
            repo: https://github.com/lewars/dotfiles.git
            dest: '{{ ansible_env.HOME }}/git/dotfiles'
            update: true
        - name: Install dot file
          ansible.builtin.command:
            cmd: make
            chdir: '{{ ansible_env.HOME }}/git/dotfiles'
            creates:
              - '{{ ansible_env.HOME }}/.bashrc'
              - '{{ ansible_env.HOME }}/.gitconfig'
              - '{{ ansible_env.HOME }}/.dotfiles'
              - '{{ ansible_env.HOME }}/.emacs'
        - name: Create a bin dir in home directory
          ansible.builtin.file:
            path: '{{ ansible_env.HOME }}/bin'
            state: directory
            mode: "0700"
        - name: Check if Google Cloud CLI is installed
          ansible.builtin.stat:
            path: /usr/bin/gcloud
          register: gcloud
          environment: '{{ WS_EXTRA | default ({}) }}'
          when: WS_EXTRA is defined
        - name: Download and install gcloud sdk
          ansible.builtin.unarchive:
            src: https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-454.0.0-linux-x86_64.tar.gz
            dest: '{{ ansible_env.HOME }}/bin'
            remote_src: true
          environment: '{{ WS_EXTRA | default ({}) }}'
          when: gcloud.stat.exists != true and WS_EXTRA is defined
        - name: Install gcloud cli
          ansible.builtin.command:
            cmd: '{{ ansible_env.HOME }}/bin/google-cloud-sdk/install.sh --usage-reporting false --bash-completion true --path-update true --additional-components kubectl -q' # yamllint disable-line rule:line-length
          register: gcloud_cli
          changed_when: gcloud_cli.rc != 0
          environment: '{{ WS_EXTRA | default ({}) }}'
          when: WS_EXTRA is defined
        - name: Check if IntelliJ\ IDEA.app is installed
          ansible.builtin.stat:
            path: /Applications/IntelliJ\ IDEA.app
          register: intelljapp
          environment: '{{ WS_CODE | default ({}) }}'
          when: intelljapp != 0 and WS_CODE is defined
        - name: Check if IntelliJ is installed
          ansible.builtin.command:
            cmd: test -d /Applications/IntelliJ\ IDEA.app
          register: intelljdir
          environment: '{{ WS_CODE | default ({}) }}'
          when: intelljapp != 0 and WS_CODE is defined
          changed_when: intelljapp.rc != 0
        - name: Check if Intell J is isntalled
          community.general.homebrew_cask:
            state: present
            name: intellij-idea
          environment: '{{ WS_CODE | default ({}) }}'
          when: intelljdir.rc != 0 and WS_CODE is defined
          changed_when: gcloud_cli.rc != 0
        - name: Check if iTerm is installed
          ansible.builtin.command:
            cmd: test -d /Applications/iTerm.app
          register: itermdir
          changed_when: itermdir.rc != 0
        - name: Check if iterm2 is installed
          community.general.homebrew_cask:
            state: present
            name: iterm2
          when: itermdir.rc != 0
        - name: Check if macfuse is installed
          ansible.builtin.command:
            cmd: brew info macfuse >/dev/null
          register: macfuseinfo
          environment: '{{ WS_EXTREAM | default ({}) }}'
          when: intelljdir.rc != 0 and WS_EXTREAM is defined
          changed_when: macfuseinfo.rc != 0
        - name: Check install macfuse
          community.general.homebrew_cask:
            state: present
            name: macfuse
          environment: '{{ WS_EXTREAM | default ({}) }}'
          when: intelljdir.rc != 0 and WS_EXTREAM is defined
        - name: Check if VLC is installed
          ansible.builtin.command:
            cmd: test -d /Applications/VLC.app
          register: vlcinfo
          changed_when: vlcinfo.rc != 0
          environment: '{{ WS_EXTRA | default ({}) }}'
          when: WS_EXTRA is defined
        - name: Install VLC
          community.general.homebrew_cask:
            state: present
            name: vlc
          environment: '{{ WS_EXTRA | default ({}) }}'
          when: vlcinfo.rc != 0 and WS_EXTRA is defined
        - name: Check if Loopback is installed
          ansible.builtin.command:
            cmd: test -d /Applications/Loopback.app
          register: loopbackdir
          changed_when: loopbackdir.rc != 0
          environment: '{{ WS_EXTRA | default ({}) }}'
          when: WS_EXTRA is defined
        - name: Check if loopback is installed
          community.general.homebrew:
            state: present
            name: loopback
          environment: '{{ WS_EXTRA | default ({}) }}'
          when: loopbackdir.rc != 0 and WS_EXTRA is defined
        - name: Set /bin/bash as default shell
          ansible.builtin.command:
            cmd: chsh -s /bin/bash
          register: shell_change_cmd
          changed_when: shell_change_cmd.rc != 0
          become: true
